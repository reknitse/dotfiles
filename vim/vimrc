""""""""""""""""""""""""""""""""""""""""""""""""""
" general
""""""""""""""""""""""""""""""""""""""""""""""""""
 "enables filetype detection, enables filetype-specific scripts (ftplugins), enables filetype-specific indent scripts.
filetype plugin indent on
" no vi compatible, more like vim!
set nocompatible
""""""""""""""""""""""""""""""""""""""""""""""""""
" Theme
""""""""""""""""""""""""""""""""""""""""""""""""""
" syntax highlighting
syntax on
" theme
colo pencil
let g:pencil_terminal_italics = 1
" No annoying sound on errors
set noerrorbells
set visualbell t_vb=
set novisualbell
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set laststatus=2
" set tabline=2
"set guioptions=aegimrLtT
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#wordcount#filetypes = 'vimwiki'
"let g:airline_theme = 'pencil'
""""""""""""""""""""""""""""""""""""""""""""""""""
" NERD Commenter
""""""""""""""""""""""""""""""""""""""""""""""""""
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1
""""""""""""""""""""""""""""""""""""""""""""""""""
" vimwiki
""""""""""""""""""""""""""""""""""""""""""""""""""
let wiki = {}
let wiki.path = '~/gwiki'
let wiki.path_html = '~/gwiki/html'
let wiki.ext = '.mkd'
let wiki.auto_toc = 1
let wiki.list_margin = 0
let wiki.syntax = 'markdown'
let wiki.custom_wiki2html = '~/.vim/bin/wiki2html.sh'
let wiki.custom_wiki2html_args = ''
let wiki750 = copy(wiki)
let wiki750.path = '~/gwiki/750words'
let wiki750.path_html = '~/gwiki/html/750words'
let wiki_gregor = copy(wiki)
let wiki_gregor.path = '~/gwiki/gregor'
let wiki_gregor.path_html = '~/gwiki/html/gregor'
let wiki_book = copy(wiki)
let wiki_book.path = '~/gwiki/book'
let wiki_book.path_html = '~/gwiki/html/book'
let wiki_code = copy(wiki)
let wiki_code.path = '~/gwiki/code'
let wiki_code.path_html = '~/gwiki/html/code'
let wiki_work = copy(wiki)
let wiki_work.path = '~/gwiki/work'
let wiki_work.path_html = '~/gwiki/html/work'
let g:vimwiki_list = [wiki,wiki750,wiki_gregor,wiki_book,wiki_code,wiki_work]
let g:vimwiki_folding = 'expr'
let g:vimwiki_dir_link = 'index'
let g:vimwiki_auto_chdir = 0
""""""""""""""""""""""""""""""""""""""""""""""""""
" Signify
""""""""""""""""""""""""""""""""""""""""""""""""""
let g:signify_vcs_list=['git', 'svn']
""""""""""""""""""""""""""""""""""""""""""""""""""
" Pencil
""""""""""""""""""""""""""""""""""""""""""""""""""
augroup pencil
  autocmd! 
  autocmd FileType markdown,vimwiki,text call pencil#init({'wrap':'soft'}) 
augroup END 
let g:airline_section_x = '%{PencilMode()}'
let g:pencil#mode_indicators = {'hard': 'H', 'auto': 'A', 'soft': 'S', 'off': '',}
""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim user interface
""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 3 lines to the cursor - when moving vertically using j/k
set so=3

" Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
" imap <Del> <BS>
set whichwrap+=<,>,h,l,[,]

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" search while typing
set is

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => restore-vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set viewoptions=cursor,folds,slash,unix
set backup
set backupdir=$HOME/.vim/backup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=1000

set timeout " Do time out on mappings and others
set timeoutlen=3000 " Wait {num} ms before timing out a mapping

" stop insert mode on focus lost
au FocusLost * stopinsert

" When you’re pressing Escape to leave insert mode in the terminal, it will by
" default take a second or another keystroke to leave insert mode completely
" and update the statusline. This fixes that. I got this from:
" https://powerline.readthedocs.org/en/latest/tipstricks.html#vim
"if !has('gui_running')
"    set ttimeoutlen=10
"    augroup FastEscape
"        autocmd!
"        au InsertEnter * set timeoutlen=0
"        au InsertLeave * set timeoutlen=1000
"    augroup END
"endif

" Set to auto read when a file is changed from the outside
set autoread

set langmap=ü[,Ü],ä[,Ä],ö^,Ö$,ß\\\\
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

cmap <C-k> <Up>
cmap <C-j> <Down>

" line number
set nu
set relativenumber

"autocmd WinLeave * :set norelativenumber
"autocmd WinEnter * :set relativenumber
"autocmd BufEnter * :set number
"autocmd BufEnter * :set relativenumber
"autocmd FocusLost * :set norelativenumber
"autocmd FocusGained * :set relativenumber
"autocmd InsertEnter * :set norelativenumber
"autocmd InsertLeave * :set relativenumber

set foldmethod=manual

set clipboard=unnamed
set mouse=

" Set utf8 as standard encoding
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Goyo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:goyo_enter()
  set scrolloff=999
  Limelight
endfunction

function! s:goyo_leave()
  set scrolloff=7
  Limelight!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

set scrolloff=7

"set ai "Auto indent
"set si "Smart indent
"set wrap "Wrap lines
"set breakindent
set showbreak=..
""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='100,\"1000,:2000,%,n~/.viminfo

" tell it to use an undo file
set undofile
" set a directory to store the undo history
set undodir=$HOME/.vim/undo/
set undolevels=1000
set undoreload=10000

function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    "autocmd BufWinEnter * call ResCur()
augroup END

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
" set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
set spelllang=de_de
set nospell
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Thesaurus
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set thesaurus+=~/.vim/thesaurus/openthesaurus.vim.txt
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
        exe "menu Foo.Bar :" . a:str
        emenu Foo.Bar
        unmenu Foo
endfunction


function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" change directory to $HOME if started in progs/vim
function! CDHome()
    if getcwd() == "C:\\progs\\vim"
        cd $HOME
    endif
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction
